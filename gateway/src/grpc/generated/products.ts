/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: products.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class ProductRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        allowDisabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("allowDisabled" in data && data.allowDisabled != undefined) {
                this.allowDisabled = data.allowDisabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get allowDisabled() {
        return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
    }
    set allowDisabled(value: boolean) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        id?: number;
        allowDisabled?: boolean;
    }): ProductRequest {
        const message = new ProductRequest({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.allowDisabled != null) {
            message.allowDisabled = data.allowDisabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            allowDisabled?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.allowDisabled != null) {
            data.allowDisabled = this.allowDisabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (this.allowDisabled != false)
            writer.writeBool(2, this.allowDisabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                case 2:
                    message.allowDisabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductRequest {
        return ProductRequest.deserialize(bytes);
    }
}
export class Status extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        ok?: boolean;
        message?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("ok" in data && data.ok != undefined) {
                this.ok = data.ok;
            }
            if ("message" in data && data.message != undefined) {
                this.message = data.message;
            }
        }
    }
    get ok() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set ok(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get message() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set message(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        ok?: boolean;
        message?: string;
    }): Status {
        const message = new Status({});
        if (data.ok != null) {
            message.ok = data.ok;
        }
        if (data.message != null) {
            message.message = data.message;
        }
        return message;
    }
    toObject() {
        const data: {
            ok?: boolean;
            message?: string;
        } = {};
        if (this.ok != null) {
            data.ok = this.ok;
        }
        if (this.message != null) {
            data.message = this.message;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.ok != false)
            writer.writeBool(1, this.ok);
        if (this.message.length)
            writer.writeString(2, this.message);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Status {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Status();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.ok = reader.readBool();
                    break;
                case 2:
                    message.message = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Status {
        return Status.deserialize(bytes);
    }
}
export class ListingRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pageNumber?: number;
        perPage?: number;
        includeDisabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pageNumber" in data && data.pageNumber != undefined) {
                this.pageNumber = data.pageNumber;
            }
            if ("perPage" in data && data.perPage != undefined) {
                this.perPage = data.perPage;
            }
            if ("includeDisabled" in data && data.includeDisabled != undefined) {
                this.includeDisabled = data.includeDisabled;
            }
        }
    }
    get pageNumber() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set pageNumber(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get perPage() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set perPage(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get includeDisabled() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set includeDisabled(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        pageNumber?: number;
        perPage?: number;
        includeDisabled?: boolean;
    }): ListingRequest {
        const message = new ListingRequest({});
        if (data.pageNumber != null) {
            message.pageNumber = data.pageNumber;
        }
        if (data.perPage != null) {
            message.perPage = data.perPage;
        }
        if (data.includeDisabled != null) {
            message.includeDisabled = data.includeDisabled;
        }
        return message;
    }
    toObject() {
        const data: {
            pageNumber?: number;
            perPage?: number;
            includeDisabled?: boolean;
        } = {};
        if (this.pageNumber != null) {
            data.pageNumber = this.pageNumber;
        }
        if (this.perPage != null) {
            data.perPage = this.perPage;
        }
        if (this.includeDisabled != null) {
            data.includeDisabled = this.includeDisabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.pageNumber != 0)
            writer.writeInt32(1, this.pageNumber);
        if (this.perPage != 0)
            writer.writeInt32(2, this.perPage);
        if (this.includeDisabled != false)
            writer.writeBool(3, this.includeDisabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ListingRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ListingRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.pageNumber = reader.readInt32();
                    break;
                case 2:
                    message.perPage = reader.readInt32();
                    break;
                case 3:
                    message.includeDisabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ListingRequest {
        return ListingRequest.deserialize(bytes);
    }
}
export class ProductData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        name?: string;
        data?: string;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        id?: number;
        name?: string;
        data?: string;
        enabled?: boolean;
    }): ProductData {
        const message = new ProductData({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            name?: string;
            data?: string;
            enabled?: boolean;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt64(1, this.id);
        if (this.name.length)
            writer.writeString(2, this.name);
        if (this.data.length)
            writer.writeString(3, this.data);
        if (this.enabled != false)
            writer.writeBool(4, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt64();
                    break;
                case 2:
                    message.name = reader.readString();
                    break;
                case 3:
                    message.data = reader.readString();
                    break;
                case 4:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductData {
        return ProductData.deserialize(bytes);
    }
}
export class ProductCreationData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name?: string;
        data?: string;
        enabled?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name" in data && data.name != undefined) {
                this.name = data.name;
            }
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("enabled" in data && data.enabled != undefined) {
                this.enabled = data.enabled;
            }
        }
    }
    get name() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set name(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get data() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set data(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get enabled() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set enabled(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        name?: string;
        data?: string;
        enabled?: boolean;
    }): ProductCreationData {
        const message = new ProductCreationData({});
        if (data.name != null) {
            message.name = data.name;
        }
        if (data.data != null) {
            message.data = data.data;
        }
        if (data.enabled != null) {
            message.enabled = data.enabled;
        }
        return message;
    }
    toObject() {
        const data: {
            name?: string;
            data?: string;
            enabled?: boolean;
        } = {};
        if (this.name != null) {
            data.name = this.name;
        }
        if (this.data != null) {
            data.data = this.data;
        }
        if (this.enabled != null) {
            data.enabled = this.enabled;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name.length)
            writer.writeString(1, this.name);
        if (this.data.length)
            writer.writeString(2, this.data);
        if (this.enabled != false)
            writer.writeBool(3, this.enabled);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductCreationData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductCreationData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name = reader.readString();
                    break;
                case 2:
                    message.data = reader.readString();
                    break;
                case 3:
                    message.enabled = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductCreationData {
        return ProductCreationData.deserialize(bytes);
    }
}
export class ProductSet extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        products?: ProductData[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("products" in data && data.products != undefined) {
                this.products = data.products;
            }
        }
    }
    get products() {
        return pb_1.Message.getRepeatedWrapperField(this, ProductData, 1) as ProductData[];
    }
    set products(value: ProductData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        products?: ReturnType<typeof ProductData.prototype.toObject>[];
    }): ProductSet {
        const message = new ProductSet({});
        if (data.products != null) {
            message.products = data.products.map(item => ProductData.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            products?: ReturnType<typeof ProductData.prototype.toObject>[];
        } = {};
        if (this.products != null) {
            data.products = this.products.map((item: ProductData) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.products.length)
            writer.writeRepeatedMessage(1, this.products, (item: ProductData) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductSet {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductSet();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ProductData.deserialize(reader), ProductData));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductSet {
        return ProductSet.deserialize(bytes);
    }
}
export class ProductCreationSet extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        products?: ProductCreationData[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("products" in data && data.products != undefined) {
                this.products = data.products;
            }
        }
    }
    get products() {
        return pb_1.Message.getRepeatedWrapperField(this, ProductCreationData, 1) as ProductCreationData[];
    }
    set products(value: ProductCreationData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    static fromObject(data: {
        products?: ReturnType<typeof ProductCreationData.prototype.toObject>[];
    }): ProductCreationSet {
        const message = new ProductCreationSet({});
        if (data.products != null) {
            message.products = data.products.map(item => ProductCreationData.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            products?: ReturnType<typeof ProductCreationData.prototype.toObject>[];
        } = {};
        if (this.products != null) {
            data.products = this.products.map((item: ProductCreationData) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.products.length)
            writer.writeRepeatedMessage(1, this.products, (item: ProductCreationData) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProductCreationSet {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProductCreationSet();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.products, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ProductCreationData.deserialize(reader), ProductCreationData));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ProductCreationSet {
        return ProductCreationSet.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedProductService {
    static definition = {
        CreateProducts: {
            path: "/Product/CreateProducts",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ProductCreationSet) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ProductCreationSet.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Status) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Status.deserialize(new Uint8Array(bytes))
        },
        GetProduct: {
            path: "/Product/GetProduct",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ProductRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ProductRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ProductData) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ProductData.deserialize(new Uint8Array(bytes))
        },
        GetListing: {
            path: "/Product/GetListing",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ListingRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ListingRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: ProductSet) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => ProductSet.deserialize(new Uint8Array(bytes))
        },
        UpdateProduct: {
            path: "/Product/UpdateProduct",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ProductData) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ProductData.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Status) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Status.deserialize(new Uint8Array(bytes))
        },
        DeleteProduct: {
            path: "/Product/DeleteProduct",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: ProductRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => ProductRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Status) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Status.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract CreateProducts(call: grpc_1.ServerUnaryCall<ProductCreationSet, Status>, callback: grpc_1.sendUnaryData<Status>): void;
    abstract GetProduct(call: grpc_1.ServerUnaryCall<ProductRequest, ProductData>, callback: grpc_1.sendUnaryData<ProductData>): void;
    abstract GetListing(call: grpc_1.ServerUnaryCall<ListingRequest, ProductSet>, callback: grpc_1.sendUnaryData<ProductSet>): void;
    abstract UpdateProduct(call: grpc_1.ServerUnaryCall<ProductData, Status>, callback: grpc_1.sendUnaryData<Status>): void;
    abstract DeleteProduct(call: grpc_1.ServerUnaryCall<ProductRequest, Status>, callback: grpc_1.sendUnaryData<Status>): void;
}
export class ProductClient extends grpc_1.makeGenericClientConstructor(UnimplementedProductService.definition, "Product", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    CreateProducts: GrpcUnaryServiceInterface<ProductCreationSet, Status> = (message: ProductCreationSet, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Status>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Status>, callback?: grpc_1.requestCallback<Status>): grpc_1.ClientUnaryCall => {
        return super.CreateProducts(message, metadata, options, callback);
    };
    GetProduct: GrpcUnaryServiceInterface<ProductRequest, ProductData> = (message: ProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProductData>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProductData>, callback?: grpc_1.requestCallback<ProductData>): grpc_1.ClientUnaryCall => {
        return super.GetProduct(message, metadata, options, callback);
    };
    GetListing: GrpcUnaryServiceInterface<ListingRequest, ProductSet> = (message: ListingRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<ProductSet>, options?: grpc_1.CallOptions | grpc_1.requestCallback<ProductSet>, callback?: grpc_1.requestCallback<ProductSet>): grpc_1.ClientUnaryCall => {
        return super.GetListing(message, metadata, options, callback);
    };
    UpdateProduct: GrpcUnaryServiceInterface<ProductData, Status> = (message: ProductData, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Status>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Status>, callback?: grpc_1.requestCallback<Status>): grpc_1.ClientUnaryCall => {
        return super.UpdateProduct(message, metadata, options, callback);
    };
    DeleteProduct: GrpcUnaryServiceInterface<ProductRequest, Status> = (message: ProductRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Status>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Status>, callback?: grpc_1.requestCallback<Status>): grpc_1.ClientUnaryCall => {
        return super.DeleteProduct(message, metadata, options, callback);
    };
}
