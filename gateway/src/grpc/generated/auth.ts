/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 5.27.1
 * source: auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class UserInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        login?: string;
        password?: string;
        admin?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("login" in data && data.login != undefined) {
                this.login = data.login;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("admin" in data && data.admin != undefined) {
                this.admin = data.admin;
            }
        }
    }
    get login() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set login(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get admin() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set admin(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        login?: string;
        password?: string;
        admin?: boolean;
    }): UserInfo {
        const message = new UserInfo({});
        if (data.login != null) {
            message.login = data.login;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.admin != null) {
            message.admin = data.admin;
        }
        return message;
    }
    toObject() {
        const data: {
            login?: string;
            password?: string;
            admin?: boolean;
        } = {};
        if (this.login != null) {
            data.login = this.login;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.admin != null) {
            data.admin = this.admin;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.login.length)
            writer.writeString(1, this.login);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (this.admin != false)
            writer.writeBool(3, this.admin);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.login = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                case 3:
                    message.admin = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserInfo {
        return UserInfo.deserialize(bytes);
    }
}
export class Claim extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        login?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("login" in data && data.login != undefined) {
                this.login = data.login;
            }
        }
    }
    get login() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set login(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        login?: string;
    }): Claim {
        const message = new Claim({});
        if (data.login != null) {
            message.login = data.login;
        }
        return message;
    }
    toObject() {
        const data: {
            login?: string;
        } = {};
        if (this.login != null) {
            data.login = this.login;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.login.length)
            writer.writeString(1, this.login);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Claim {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Claim();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.login = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Claim {
        return Claim.deserialize(bytes);
    }
}
export class Credentials extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        login?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("login" in data && data.login != undefined) {
                this.login = data.login;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get login() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set login(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        login?: string;
        password?: string;
    }): Credentials {
        const message = new Credentials({});
        if (data.login != null) {
            message.login = data.login;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            login?: string;
            password?: string;
        } = {};
        if (this.login != null) {
            data.login = this.login;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.login.length)
            writer.writeString(1, this.login);
        if (this.password.length)
            writer.writeString(2, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Credentials {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Credentials();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.login = reader.readString();
                    break;
                case 2:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Credentials {
        return Credentials.deserialize(bytes);
    }
}
export class TokenPair extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        refresh?: string;
        auth?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("refresh" in data && data.refresh != undefined) {
                this.refresh = data.refresh;
            }
            if ("auth" in data && data.auth != undefined) {
                this.auth = data.auth;
            }
        }
    }
    get refresh() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set refresh(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get auth() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set auth(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        refresh?: string;
        auth?: string;
    }): TokenPair {
        const message = new TokenPair({});
        if (data.refresh != null) {
            message.refresh = data.refresh;
        }
        if (data.auth != null) {
            message.auth = data.auth;
        }
        return message;
    }
    toObject() {
        const data: {
            refresh?: string;
            auth?: string;
        } = {};
        if (this.refresh != null) {
            data.refresh = this.refresh;
        }
        if (this.auth != null) {
            data.auth = this.auth;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.refresh.length)
            writer.writeString(1, this.refresh);
        if (this.auth.length)
            writer.writeString(2, this.auth);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TokenPair {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TokenPair();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.refresh = reader.readString();
                    break;
                case 2:
                    message.auth = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TokenPair {
        return TokenPair.deserialize(bytes);
    }
}
export class Empty extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {}) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") { }
    }
    static fromObject(data: {}): Empty {
        const message = new Empty({});
        return message;
    }
    toObject() {
        const data: {} = {};
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Empty {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Empty();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Empty {
        return Empty.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedUserService {
    static definition = {
        Auth: {
            path: "/User/Auth",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: Credentials) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => Credentials.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: TokenPair) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => TokenPair.deserialize(new Uint8Array(bytes))
        },
        Refresh: {
            path: "/User/Refresh",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: Claim) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => Claim.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: TokenPair) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => TokenPair.deserialize(new Uint8Array(bytes))
        },
        Register: {
            path: "/User/Register",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: Credentials) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => Credentials.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: TokenPair) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => TokenPair.deserialize(new Uint8Array(bytes))
        },
        Modify: {
            path: "/User/Modify",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UserInfo) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UserInfo.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: Empty) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => Empty.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract Auth(call: grpc_1.ServerUnaryCall<Credentials, TokenPair>, callback: grpc_1.sendUnaryData<TokenPair>): void;
    abstract Refresh(call: grpc_1.ServerUnaryCall<Claim, TokenPair>, callback: grpc_1.sendUnaryData<TokenPair>): void;
    abstract Register(call: grpc_1.ServerUnaryCall<Credentials, TokenPair>, callback: grpc_1.sendUnaryData<TokenPair>): void;
    abstract Modify(call: grpc_1.ServerUnaryCall<UserInfo, Empty>, callback: grpc_1.sendUnaryData<Empty>): void;
}
export class UserClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserService.definition, "User", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    Auth: GrpcUnaryServiceInterface<Credentials, TokenPair> = (message: Credentials, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TokenPair>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TokenPair>, callback?: grpc_1.requestCallback<TokenPair>): grpc_1.ClientUnaryCall => {
        return super.Auth(message, metadata, options, callback);
    };
    Refresh: GrpcUnaryServiceInterface<Claim, TokenPair> = (message: Claim, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TokenPair>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TokenPair>, callback?: grpc_1.requestCallback<TokenPair>): grpc_1.ClientUnaryCall => {
        return super.Refresh(message, metadata, options, callback);
    };
    Register: GrpcUnaryServiceInterface<Credentials, TokenPair> = (message: Credentials, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<TokenPair>, options?: grpc_1.CallOptions | grpc_1.requestCallback<TokenPair>, callback?: grpc_1.requestCallback<TokenPair>): grpc_1.ClientUnaryCall => {
        return super.Register(message, metadata, options, callback);
    };
    Modify: GrpcUnaryServiceInterface<UserInfo, Empty> = (message: UserInfo, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<Empty>, options?: grpc_1.CallOptions | grpc_1.requestCallback<Empty>, callback?: grpc_1.requestCallback<Empty>): grpc_1.ClientUnaryCall => {
        return super.Modify(message, metadata, options, callback);
    };
}
